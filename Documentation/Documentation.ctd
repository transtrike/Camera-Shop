<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="" is_bold="True" name="Application Info" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589112848.53" ts_lastsave="1589676123.31" unique_id="4">
		<rich_text># ASP.NET Application
- Has to include CRUD operations(preferably with LINQ)
- Database: MySQL or MariaDB
- Name: Camera Shop
- One common header and footer
- MVC type application

# Main Idea
- Camera Shop 
- You can choose a camera from the menu at index page
- Every camera will have a big image of it and sectons(bars/buttons)
--- Section 1: Specifications (view the camera's specifications)
--- Section 2: Photos (photos, made by the camera/can be submitted by the users)
--- Section 3: Reviews (users made reviews about the product)
</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="True" name="MyNotes" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589672522.23" ts_lastsave="1589672522.23" unique_id="17">
		<rich_text></rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="True" name="TODO" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589672023.18" ts_lastsave="1590776690.4" unique_id="16">
		<rich_text>#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Implement Camera Specs class 
#(</rich_text>
		<rich_text weight="heavy">SCRAPPED</rich_text>
		<rich_text>)Implement IEnumerable&lt;CameraSpecs&gt; in the CameraSpecs class
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Implement a button in Home/Index that redirects to Catalog/ShowCatalog
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Fix Database problems
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Implement query that gets from database all the cameras and passes it to Catalog/ShowCatalog View
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Add a created Camera into database
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Check to see if a camera exists in a database
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Port all input specs to the controller and input into database
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Add Camera's specs to database when adding camera
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Add an Edit Button below each camera to edit (U from CRUD)
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Add an DELETE button in red to delete a camera
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Fix error when creating a camera and inserting into database
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Add try/catch blocks where needed
#(</rich_text>
		<rich_text weight="heavy">DONE</rich_text>
		<rich_text>) Replace ADO.NET with EntiyFrameworkCore

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

# Implement Unit Tests
# Test every single method from the Catalog controller</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="True" name="Controllers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589112674.68" ts_lastsave="1590211298.8" unique_id="1">
		<rich_text># Controller list
- </rich_text>
		<rich_text link="node 5">IndexController</rich_text>
		<rich_text>
- DbController(scrapped)
- CatalogController

# Properties
- Every controller will contain a main header and footer
- Every controller should do one job and one job only

</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="DBController(Scrapped)" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589112712.26" ts_lastsave="1589403350.36" unique_id="2">
			<rich_text># Controller for the database
- Makes the connection to and from the database
- All requests go though the controller 
- Includes validation of the given data to prevent SQL injections
- Prefered method - trough LINQ

# Constructor
- Establishes the connection to the database and stores it localy

# Destructor
- Closes the connection and clears the data

# Connection()
- Returns the connection to the database

# ExecuteCommand()
- Execute a command to the database (no return OR rows affected)

# ExecureReader()
- Executes a command to the database and returns the result
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="HomeController" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589121650.61" ts_lastsave="1590211279.8" unique_id="5">
			<rich_text># Controller for the main page of the application
- Provides the main page of the application
- Redirects to the pages nessessary
- Contains the current logged user(optional/unknown can it be done)</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="CatalogController" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590211212.83" ts_lastsave="1590777439.02" unique_id="21">
			<rich_text># Controller that implements functions for the Catalog

### Public ###


# Create
- InsertIntoDatabase(Camera camera) - Inserts camera into database

# Read
- ShowCatalog() - Gets all cameras from database (first 100) and displays them to the user
- CreateCamera() - Redirects to a page, where users can enter camera specifications
- EditCamera(int cameraId) - Gets a camera by id and displays it for the user to edit/correct it
- DeleteCamera(int cameraId) - Gets a camera by id, shows the specifications to the user and an option to delete it from the database

# Update
- CreateACamera(Camera camera) - Creates the camera and sends it into the database
- EditACamera(Camera camera) - Alters the edited camera from the user into the database

# Delete
- DeleteACamera(Camera camera) - Matches a given camera with a camera from the database and erases it from the database

# Validations
- CameraExists(Camera camera) - Redirects to a page and displays that the camera given already exists in the database


### Private ###


# Create
- InsertCameraIntoDatabase(Camera cameraToInsert) - Validates and inserts camera into the database
- InsertId(Camera camera) - Gets the max Id, adds one and gives it to the camera for insertion into the database later on

# Read
- GetCatalog() - Gets all the cameras in the database

# Update
- GetCamera(int id) - Gets a particular camera from the database 

# Delete
- UpdateCamera(Camera camera) - Updates/Alters a camera from the database with the new given one

# Validations
- CameraExists(Camera camera) - Method that checks does a newly created camera exists already in the database

# Errors
Error(string errorMessage) - Redirects to the 404 Page and displays the errors to the user from the exceptions</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="True" name="Database" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589407360.47" ts_lastsave="1590239826.05" unique_id="7">
		<rich_text># PostrgreSQL
- systemctl status postgresql
- psql -d CameraShop</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="ChangeTracker(Scrapped)" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589407423.6" ts_lastsave="1590651042.94" unique_id="11">
			<rich_text># Functions
- Store Modified Entites(List&lt;Camera&gt; all)
- Store Added Entites(List&lt;Camera&gt; added)
- Store Removed Entites(List&lt;Camera&gt; removee)
- Constructor(IEnumerable&lt;T&gt; entities)
- Everytime an update is made, make changes accordingly 
- AllEntities is a clone of the given to the ctor entities</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="CameraContext" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589675470.07" ts_lastsave="1590211401.35" unique_id="18">
			<rich_text># Wrapper for the Database and connection to it to pull and push data
- Contain OnModelCreate that bind the key(database Id bind)
- Contains DbSet&lt;Camera&gt;, so it can display and use the camera class</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="CameraSet(Scrapped)" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589675999.41" ts_lastsave="1590211345.06" unique_id="19">
			<rich_text></rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="True" name="Models" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589671584.35" ts_lastsave="1589671784.08" unique_id="13">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Camera" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589671784.08" ts_lastsave="1590651068.65" unique_id="14">
			<rich_text># Class for the Camera entity
☑ Id
☑ Brand
☑ Model
☑ Megapixels
☑ BaseISO
☑ MaxISO</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="OldSpecifications(Scrapped)" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589671887.52" ts_lastsave="1590651055.05" unique_id="15">
				<rich_text># Requered
☑ Id
☑ MegapixelCountX
☑ MegapixelCountY
☑ Megapixels
☑ Base ISO
☑ MaxISO
☑ Fastest Shutter Speed
☑ Continues AF FPS
☑ Single AF FPS
☑ Video Quality (4k)
☑ Video Max FPS (60FPS)
☑ Battery Type
☑ Sensor Size (Full-Frame)
☑ Sensor Tehnology (CMOS)
☑ Mount Type
☑ SizeX
☑ SizeY
☑ SizeZ
☑ Weight

# Not requred 
☑ ExtendedISO
☑ Rated Battery Life
☑ WiFi
☑ ---WiFi Band
☑ Bluetooth
☑ Shutter lag</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Specifications(Scrapped)" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590588666.77" ts_lastsave="1590651063.28" unique_id="22">
				<rich_text>☑ Id
☑ Megapixels
☑ BaseISO
☑ MaxISO</rich_text>
			</node>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="True" name="Unit Testing" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589676123.31" ts_lastsave="1589676129.01" unique_id="20">
		<rich_text></rich_text>
	</node>
</cherrytree>
